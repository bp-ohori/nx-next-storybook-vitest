name: visual-regression-test
on:
  pull_request:
    branches:
      - main
defaults:
  run:
    shell: bash
    # これにより、機能開発ブランチや修正ブランチの変更をPR経由でメインブランチと比較し、
    # 視覚的差分がないかを自動でチェックできる。

jobs:
  take_expected_screenshots:
    name: Take Expected Screenshots
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: main # mainブランチのスクショをVRTの正の画像とする

      - name: Restore cached expected screenshots # キャッシュに保存されたスクショがあったら再利用する
        id: expected_screenshots_cache
        uses: ./.github/actions/cache-screenshots

      - name: Client setup
        if: ${{ steps.expected_screenshots_cache.outputs.cache-hit != 'true'}}
        uses: ./.github/actions/client-setup

      - name: Restore or build storybook # キャッシュにスクショが保存されてなかったらStorybookをビルドしてスクショ撮影する
        if: ${{ steps.expected_screenshots_cache.outputs.cache-hit != 'true'}}
        uses: ./.github/actions/cache-storybook-static

      - name: Take expected screenshots
        if: ${{ steps.expected_screenshots_cache.outputs.cache-hit != 'true'}}
        run: pnpm storybook:screenshot

      - name: Upload expected screenshots to artifact # 他のstepでスクショを使うのでartifactにアップする
        uses: actions/upload-artifact@v4
        with:
          name: expected-screenshots
          path: __screenshots__
          retention-days: 1

  take_actual_screenshots:
    name: Take Actual Screenshots
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Client setup
        uses: ./.github/actions/client-setup

      - name: Workaround for detached HEAD
        run: |
          git checkout ${GITHUB_HEAD_REF#refs/heads/} || git checkout -b ${GITHUB_HEAD_REF#refs/heads/} && git pull

      - name: Build Storybook
        run: pnpm storybook:build

      - name: Take actual screenshots
        run: pnpm storybook:screenshot

      - name: Upload actual screenshots to artifact
        uses: actions/upload-artifact@v4
        with:
          name: actual-screenshots
          path: __screenshots__
          retention-days: 1

  compare_screenshots:
    name: Compare Screenshots
    needs:
      - take_expected_screenshots
      - take_actual_screenshots
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Check out code
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check out PR
        if: ${{ github.event_name == 'pull_request_target' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Client setup
        uses: ./.github/actions/client-setup

      - name: Download expected screenshots from artifact
        uses: actions/download-artifact@v4
        with:
          name: expected-screenshots
          path: .reg/expected/

      - name: Download actual screenshots from artifact
        uses: actions/download-artifact@v4
        with:
          name: actual-screenshots
          path: __screenshots__

      - name: Workaround for detached HEAD
        run: git checkout ${GITHUB_HEAD_REF#refs/heads/} || git checkout -b ${GITHUB_HEAD_REF#refs/heads/} && git pull

      - name: Compare Screenshots
        run: pnpm test:vrt

      - name: Deploy VRT report to github page
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .reg/
          destination_dir: ${{ github.head_ref }}/vrt-report

      - name: upload reg-suit
        uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: visual regression test result
          path: .reg/
          include-hidden-files: true
      
      - name: Add comment
        uses: actions/github-script@v7
        env:
          ARTIFACT_URL: ${{ steps.artifact-upload-step.outputs.artifact-url }}
        with:
          script: |
            const fs = require('fs');
            const artifactUrl = process.env.ARTIFACT_URL;

            const log = fs.readFileSync('.reg/out.json', 'utf-8');
            console.log(log);
            const json = JSON.parse(log);
            console.log(json);

            const vrtComment = '[レポート](https://${context.repo.owner}.github.io/${context.repo.repo}/${{github.head_ref}}/vrt-report/index.html)を確認してください。';

            const changeItemCount = json.failedItems.length.toString();
            const newItemCount = json.newItems.length.toString();
            const deletedItemCount = json.deletedItems.length.toString();
            const passedItemCount = json.passedItems.length.toString();

            const markdown = await core.summary
              .addHeading(`reg-suit has checked for visual changes`, 3)
              .addTable([
                [":red_circle Changed", ":white_circle New", ":black_circle Deleted", ":large_blue_circle Passing"],
                [changeItemCount, newItemCount, deletedItemCount, passedItemCount]
              ])
              .addRaw(`${vrtComment}`)
              .stringify()

            const requestPerPage = 100;
            try {
              const listComments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                per_page: requestPerPage
              });
              const vrtCommentList = listComments.data.find(comment => comment.body.includes(vrtComment));
              if (vrtCommentList) {
                // delete summary comment if exists
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: vrtCommentList.id
                });
              }
              // create a comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: markdown
              });
            } catch (error) {
              core.error(`Failed to modify comment: ${error.message}`);
              return;
            }

      # - name: Comment VRT report URL
      #   uses: peter-evans/create-or-update-comment@v4
      #   with:
      #     comment-id: ${{ steps.find_comment.outputs.comment-id }}
      #     issue-number: ${{ github.event.pull_request.number }}
      #     body: |
      #       reg-suit report
      #       https://bp-ohori.github.io/nx-next-storybook-vitest/${{github.head_ref}}/vrt-report
      #       [Download](${{github.server_url}}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-step.outputs.artifact-id }})
      #     edit-mode: replace

      # - name: Deploy VRT report to github page
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_dir: .reg/
      #     destination_dir: ${{ github.head_ref }}/vrt-report

      # - name: Comment VRT report URL
      #   uses: peter-evans/create-or-update-comment@v4
      #   with:
      #     comment-id: ${{ steps.find_comment.outputs.comment-id }}
      #     issue-number: ${{ github.event.pull_request.number }}
      #     body: |
      #       reg-suit report
      #       https://bp-ohori.github.io/nx-next-storybook-vitest/${{github.head_ref}}/vrt-report
      #     edit-mode: replace
